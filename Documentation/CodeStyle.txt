   Code:
Имена class, method, enumeration, public полей, public свойств, namespace: PascalCase.
Имена локальных переменных, параметров: camelCase.
Имена private, protected, internal и protected internal полей и свойств: camelCase.
Имена const, static, readonly и т.д.: PascalCase.
Имена интерфейсов начинаются с I, например IInterface.
Для регистра «слово» — это все, что написано без внутренних пробелов, включая аббревиатуры, до следующей большой буквы. Например, MyRpc вместо MyRPC.

   Правила именования полей: 
использовать легкочитаемые слова;
не использовать сокращения;
не использовать знаки подчеркивания, дефисы и другие символы, не являющиеся буквенно-цифровыми;
имя класса, метода, поля и тд. должно описывать реализованный собой контент.

   Организация:
Модификаторы встречаются в следующем порядке: public protected internal private new abstract virtual override sealed static readonly extern unsafe volatile async.
Объявления пространств имен using идут вверху, перед любыми пространствами имен.
using порядок импорта в алфавитном порядке, за исключением System mимпорта, который всегда идет первым.
Неиспользуемые using удалять.
Порядок членов класса:
 Сгруппируйте участников класса в следующем порядке (пустая строка между группами):
  Вложенные classes, enums, delegates и events.
  Static, const и readonly поля.
  Поля и свойства.
  Конструкторы и финализаторы.
  Методы.
 Внутри каждой группы элементы должны располагаться в следующем порядке:
  Public.
  Internal.
  Protected internal.
  Protected.
  Private.
 По возможности сгруппируйте реализации интерфейса вместе.

   Правила пробелов:
Не более одного оператора в строке.
Разрыв строки перед открывающей фигурной скобкой.
Разрыв строки между закрывающей фигурной скобкой и else.
Скобки используются, даже если они необязательны.
Пробел после if/ for/ while и т. д. и после запятых.
Нет пробела после открывающей скобки или перед закрывающей скобкой.
Нет пробела между унарным оператором и его операндом. Один пробел между оператором и каждым операндом всех остальных операторов.
Как правило, продолжения строк имеют отступ в 4 пробела.
Для определений и вызовов функций, если аргументы не помещаются в одной строке, их следует разбить на несколько строк, при этом каждая последующая строка должна быть выровнена с первым аргументом. Если для этого недостаточно места, вместо этого аргументы могут быть помещены на последующих строках с отступом в четыре пробела.

   Константы:
Переменные и поля, которые можно создать, const всегда должны быть созданы const.
Если const невозможно, readonly может быть подходящей альтернативой.
Предпочитайте именованные константы магическим числам.

   Стили свойств:
Для однострочных свойств, доступных только для чтения испульзуется =>. Пример: int SomeProperty => someProperty.
Для всего остального используется { get; set; }синтаксис.

   Лямбды против именованных методов:
Если лямбда содержит более пары операторов повторно используется в нескольких местах - это должен быть именованный метод.

   Ключевое слово var:
Не использовать ключевое слово var.